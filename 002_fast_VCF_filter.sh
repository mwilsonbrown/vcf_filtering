#!/bin/bash
#
#SBATCH --job-name=fastCBPvariantVCFFilter
#SBATCH --nodes=50
#SBATCH --cpus-per-task=1
#SBATCH --ntasks-per-node=1
#SBATCH --time=0-50:00:00
#SBATCH --partition=josephsnodes
#SBATCH --account=josephsnodes
#SBATCH --mem-per-cpu=8G
#SBATCH --mail-type=ALL
#SBATCH --mail-user=wils1582@msu.edu
#SBATCH --output=/mnt/scratch/wils1582/slurm/slurm-%A.out
# VCF filtering
# July 15, 2024
# Maya Wilson Brown
#
# Modified from C. Fiscus Capsella vcf filtering
# Additional modifications to associated R scripts
# The accompanying scripts will not output jpegs automatically
# Goals: 1) document how I have filtered the VCFs generated by Adrian
# 2) update software with new OS and newer versions (no VCFtools)
#
# Update directories to not run into space issues
WORKDIR=/mnt/scratch/wils1582/july15

# make sure working directory exists
#mkdir -p "$WORKDIR"

# change directory
cd "$WORKDIR"/

# purge modules
module purge
# load modules
module load BCFtools/1.18-GCC-12.3.0
module load PLINK/2.00a3.7-gfbf-2023a
module load R/4.3.2-gfbf-2023a

## Other vars
PREFIX=CBP_CRCG
VCF=CBP_CRCG_rmF2.v.vcf.gz
RAWDIR=/mnt/scratch/wils1582
INFILES=/mnt/home/wils1582/vcf_filtering

# In the case that I do not have execute permissions for my own github repo
# copy those files to the current directory
#cp "$INFILES"/*.R "$WORKDIR"
#cp "$INFILES"/individuals/*.txt "$WORKDIR"

#### PIPELINE #####
# remove F2s
#bcftools view --samples-file ^removeCBP_vcf.txt "$RAWDIR"/July14.final_called.v.vcf \
#  -Oz -o "$WORKDIR"/CBP_CRCG_rmF2.v.vcf.gz \
#  --threads 20
#
#echo "Removal of F2s complete"
## initial filters
## 
### GATK best practices hard filters
#bcftools filter -e'QD < 2 | FS > 60 | SOR > 3 | MQ < 40 | MQRankSum < -12.5 | ReadPosRankSum < -8.0' \
#	"$WORKDIR"/"$VCF" \
#	> "$PREFIX"_temp.vcf
#bcftools view -f.,PASS "$PREFIX"_temp.vcf \
#	-Oz -o "$PREFIX"_filter1.vcf.gz
#
#echo "Filter1 complete"
#
## start fitering report
#touch "$WORKDIR"/log.txt
#
#echo "$PREFIX" >> "$WORKDIR"/log.txt
#echo "GATK best practices filter" >> "$WORKDIR"/log.txt
#echo $(bcftools query -f'%CHROM %POS\n' "$PREFIX"_filter1.vcf.gz | wc -l) \
#	>> "$WORKDIR"/log.txt
#echo "Sample count" >> "$WORKDIR"/log.txt
#echo $(bcftools query -l "$PREFIX"_filter1.vcf.gz | wc -l) \
#	>> "$WORKDIR"/log.txt
#
## remove temp
##rm "$PREFIX"_temp.vcf
#
### require 3 reads to call and keep only biallelic sites; dump entirely missing sites
#bcftools filter -e'FMT/DP<3' -S . "$PREFIX"_filter1.vcf.gz | bcftools view -i 'F_MISSING<1' -m2 -M2 -Oz -o "$PREFIX"_temp2.vcf
#
## log progress
#echo "temp2 complete"
#
#echo "3 reads called and biallelic sites" >> "$WORKDIR"/log.txt
#echo $(bcftools query -f'%CHROM %POS\n' "$PREFIX"_temp2.vcf | wc -l) \
#	>> "$WORKDIR"/log.txt
#
###########
## filter sites with > 5% het & > 5% missing data
### calculate proportion het per site with plink
#plink2 --vcf "$PREFIX"_temp2.vcf \
#	--remove /mnt/home/wils1582/vcf_filtering/individuals/CgNp.txt \
#	--geno-counts cols=chrom,pos,ref,alt,homref,refalt,homalt1 \
#	--allow-extra-chr \
#	--double-id \
#	--out "$PREFIX"
#
#echo "plink genotype caluclation complete"
#
## Move frequency file to directory
##mv "$PREFIX".gcount "$WORKDIR"/
#
### list of site ids for following Rscript
#bcftools query -f'%CHROM %POS\n' "$PREFIX"_temp2.vcf > "$WORKDIR"/"$PREFIX"_sites.txt
#
### Produce list of sites to filter by allele frquency
##Rscript "$WORKDIR"/007a_het_sites.R "$WORKDIR"/"$PREFIX".gcount 0.05 "$WORKDIR"/"$PREFIX"
#Rscript 007a_het_sites.R "$WORKDIR"/"$PREFIX".gcount 0.05 "$WORKDIR"/"$PREFIX"

# highly het sites to  remove file
cut -f1,2 "$WORKDIR"/"$PREFIX"_hetmin.txt | tail -n+2 > "$WORKDIR"/remove.txt

## remove highly heterozygous sites and sites with 5% missing calls
bcftools view --targets-file ^"$WORKDIR"/remove.txt "$PREFIX"_temp2.vcf -o "$PREFIX"_temp3.vcf

# log
echo "heterozygisty filter complete"

echo "Heterozygosity site filter" >> "$WORKDIR"/log.txt
echo $(bcftools query -f'%CHROM %POS\n' "$PREFIX"_temp3.vcf | wc -l) \
	>> "$WORKDIR"/log.txt

# calculate site missingness
plink2 --vcf "$PREFIX"_temp3.vcf --missing variant-only vcols=chrom,pos,nmiss,nobs,fmiss \
  --allow-extra-chr \
  --double-id \
  --out "$PREFIX"

# Keep sites where at least 95% is not missing
bcftools view --include 'F_MISSING<0.05' "$PREFIX"_temp3.vcf -Oz -o "$PREFIX"_filter2.vcf.gz

echo "missing data filter complete"

echo "missing site call filter" >> "$WORKDIR"/log.txt
echo $(bcftools query -f'%CHROM %POS\n' "$PREFIX"_filter2.vcf.gz | wc -l) \
	>> "$WORKDIR"/log.txt

##########
# top cut depth at value of > Q3 + 1.5IQR
## calculate depth per site and plot
bcftools query -f '%CHROM %POS %DP\n' "$PREFIX"_filter2.vcf.gz \
	> "$WORKDIR"/depth.txt
#Rscript "$WORKDIR"/007b_depth_thresh.R "$WORKDIR"/depth.txt "$WORKDIR"/"$PREFIX"
Rscript 007b_depth_thresh.R "$WORKDIR"/depth.txt "$WORKDIR"/"$PREFIX"

echo "depth calc complete"

## filter on depth
MAXDP=$(head -n1 "$WORKDIR"/"$PREFIX"_depth_cutval.txt)

bcftools view -i "INFO/DP < $MAXDP" "$PREFIX"_filter2.vcf.gz \
	-Oz -o "$PREFIX"_filter3.vcf.gz

## Write to filtering report
echo "Depth filter complete"
echo "depth filter " >> "$WORKDIR"/log.txt
echo $(bcftools query -f'%CHROM %POS\n' "$PREFIX"_filter3.vcf.gz | wc -l) \
	>> "$WORKDIR"/log.txt

##########
# calculate stats per ind
plink2 --vcf "$PREFIX"_filter3.vcf.gz \
	--sample-counts cols=homref,het,homalt \
	--allow-extra-chr \
        --double-id \
        --out "$PREFIX"

# move to file directory
#mv "$PREFIX".scount "$WORKDIR"/
